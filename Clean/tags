!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BUILD_MAX_HEAP	heapsort.c	/^void BUILD_MAX_HEAP(heapNode *A, int len)$/;"	f
BUILD_MIN_HEAP	heapsort.c	/^void BUILD_MIN_HEAP(heapNode *A, int len)$/;"	f
CHUNKS	heapsort.c	4;"	d	file:
CHUNKS	heapsort.h	8;"	d
DISPLAY_HEAP	heapsort.c	/^void DISPLAY_HEAP(heapNode *A, int len)$/;"	f
EXIT_FAILURE	main.c	11;"	d	file:
GENFLOAT_H_INCLUDED	genFloat.h	2;"	d
GETFLOAT_H_INCLUDED	getfloat.h	2;"	d
HEAPSORT_H_INCLUDED	heapsort.h	2;"	d
INT_MAX	kmerge.c	8;"	d	file:
LEFT	heapsort.c	/^int LEFT ( int i)$/;"	f
MAX_FLOATS	genFloat.c	8;"	d	file:
MAX_FLOATS	genFloat.h	9;"	d
MAX_FLOATS_READ_IN_HEAP	main.c	16;"	d	file:
MAX_HEAPIFY	heapsort.c	/^void MAX_HEAPIFY (heapNode *A, int index, int len)$/;"	f
MAX_HEAPSORT	heapsort.c	/^void MAX_HEAPSORT (heapNode *A, int len)$/;"	f
MEAN_H_INCLUDED	mean.h	2;"	d
MIN_HEAPIFY	heapsort.c	/^void MIN_HEAPIFY (heapNode *A, int index, int len)$/;"	f
MIN_HEAPSORT	heapsort.c	/^void MIN_HEAPSORT (heapNode *A, int len)$/;"	f
PARENT	heapsort.c	/^int PARENT (int i)$/;"	f
RIGHT	heapsort.c	/^int RIGHT ( int i)$/;"	f
SORT_HEAP_AND_WRITE_OUTPUT	heapsort.c	/^void SORT_HEAP_AND_WRITE_OUTPUT (heapNode *A, FILE *fp_out, int total_chunks, int max_floats)$/;"	f
TEST_FLAG	heapsort.c	/^int TEST_FLAG = 0;$/;"	v
TOTAL_FLOATS	heapsort.c	5;"	d	file:
TOTAL_FLOATS	heapsort.h	9;"	d
arrayNum	kmerge.c	/^    int arrayNum;$/;"	m	struct:heapNode	file:
buildHeap	kmerge.c	/^void buildHeap(heapNode *a[], int len){$/;"	f
callHeapSort	main.c	/^int callHeapSort (int total_chunks, int max_floats_read)$/;"	f
compute_mean	mean.c	/^double compute_mean(float *A,int n)$/;"	f
compute_sample_var	mean.c	/^double compute_sample_var(double mean, float *A, int n)$/;"	f
createNode	kmerge.c	/^heapNode * createNode (int data, int arrayNum, int itemNum){$/;"	f
data	kmerge.c	/^    int data;$/;"	m	struct:heapNode	file:
floatList	main.c	/^float *floatList,*zscorelist;$/;"	v
genFloat	genFloat.c	/^int genFloat(char* inputfile)$/;"	f
getfloat	getfloat.c	/^int getfloat(FILE *stream, float *pn)$/;"	f
heapNode	heapsort.h	/^typedef struct heapNode{$/;"	s
heapNode	heapsort.h	/^} heapNode ;$/;"	t	typeref:struct:heapNode
heapNode	kmerge.c	/^typedef struct heapNode{$/;"	s	file:
heapNode	kmerge.c	/^} heapNode;$/;"	t	typeref:struct:heapNode	file:
itemNum	kmerge.c	/^    int itemNum;$/;"	m	struct:heapNode	file:
leftChild	kmerge.c	/^int leftChild (int i){$/;"	f
lst	main.c	/^FILE *lst;$/;"	v
main	main.c	/^int main(int argc, char **argv)$/;"	f
merge	main.c	/^void merge(float * lst, int a, int b, int s )$/;"	f
mergesort	main.c	/^void mergesort(float * lst, int a, int b)$/;"	f
openFile	heapsort.c	/^FILE* openFile(char* fileName, char* mode)$/;"	f
printBanner	main.c	/^void printBanner()$/;"	f
rightChild	kmerge.c	/^int rightChild (int i){$/;"	f
root_element	heapsort.h	/^         float *root_element;          \/\/value$/;"	m	struct:heapNode
root_index	heapsort.h	/^         FILE* root_index;            \/\/position of the floating point number in the file$/;"	m	struct:heapNode
student	test.c	/^struct student{$/;"	s	file:
swap	heapsort.c	/^void swap ( float *px, float *py)$/;"	f
swap	kmerge.c	/^void swap(heapNode * a[], int i, int len){$/;"	f
swap_FP	heapsort.c	/^void swap_FP ( FILE *px, FILE *py)$/;"	f
zscorelist	main.c	/^float *floatList,*zscorelist;$/;"	v
